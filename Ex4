package Ex4_6581017;

import java.util.*;

/**
 *
 * @author Weerin Tiwiruch 6581017
 */

class Customer {

    private static int runningID = 1; // for running customer ID
    private int ID;
    private int order; // order amount (random value 1-20)

    public Customer() 
        {
            Random rand = new Random();
            order = rand.nextInt(1,21);
            ID = runningID;
            runningID++;
        }
    public int getID()  {return ID;}
    public int getOrder() {return order;}
    public void print(){
        System.out.printf(" [Customer %2d order %2d lots]\n",ID,order);
    }
   
}

class Shop {

    private int itemsToRefill; // items to refill in odd day
    private int maxDays; // max day for simulation
    private PriorityQueue<Customer> orderQueue= new PriorityQueue<>(new SortcusByOrder().reversed().thenComparing(new SortcusByID()));     
    private ArrayDeque<Customer> billingQueue = new ArrayDeque<>();
    public Shop(int item,int day){
        itemsToRefill = item;
        maxDays = day;
    }
    public static int remain =0;
    public int getItem() {return itemsToRefill;}
    public int getDay() {return maxDays;}
    public boolean checkDay(int i){
        if(i%2==1){return false;} //odd
        else return true; //even
    }
    
    public void simulation() {
        /* implement simulation */ 
        
        System.out.println("=== Day 0 : customer arrival ===");
         
        for(int ini=0; ini<5 ; ini++){
           Customer cus = new Customer();         
           cus.print();
           orderQueue.add(cus);
        }
        System.out.println("\n");
        System.out.println("=== Simulation ===");     
        for(int i=1; i<=maxDays ; i++){
            if(!checkDay(i)){
                //odd days
                remain = remain + itemsToRefill;
                Customer cus = new Customer();
                System.out.printf("Day %d\n",i);
                System.out.printf("Refilling    >>   Remaining items = %d lots\n",remain);
                System.out.printf("New arrival  >> "); cus.print(); orderQueue.add(cus);
               
                for(int j=1;j<=2;j++){
                    if (!orderQueue.isEmpty()){   
                        Customer currentCus = orderQueue.poll(); 
              
                            if (currentCus.getOrder() <= remain) { 
                                remain -= currentCus.getOrder(); 
                                System.out.printf("Packing %d    >>  [Customer %2d order %2d lots]  success    Remaining items = %2d lots\n",j, currentCus.getID(), currentCus.getOrder(),remain);       
                                billingQueue.add(currentCus); 
                            }
                         
                            else {
                                System.out.printf("Packing %d    >>  [Customer %2d order %2d lots]  failure\n",j, currentCus.getID(), currentCus.getOrder()); 
                                orderQueue.add(currentCus);                   
                               
                            }
                        } 
                    
                    else {System.out.println("No more customers to pack.");  break; }
                   }//end packing
                
              
                System.out.println();
            } //end odd
            
            
            else if(checkDay(i)){
                //even days
                Customer cus = new Customer();
                System.out.printf("Day %d\n",i);
                System.out.printf("New arrival  >> "); cus.print(); orderQueue.add(cus);
                
                for(int j=1;j<=2;j++){
                    if (!orderQueue.isEmpty()){   
                        Customer currentCus = orderQueue.poll(); 
              
                            if (currentCus.getOrder() <= remain) { 
                                remain -= currentCus.getOrder(); 
                                System.out.printf("Packing %d    >>  [Customer %2d order %2d lots]  success    Remaining items = %2d lots\n",j, currentCus.getID(), currentCus.getOrder(),remain);       
                                billingQueue.add(currentCus); 
                            }
                         
                            else {
                                System.out.printf("Packing %d    >>  [Customer %2d order %2d lots]  failure\n",j, currentCus.getID(), currentCus.getOrder()); 
                                orderQueue.add(currentCus);                   
                               
                            }
                        } 
                    
                    else {System.out.println("No more customers to pack.");  break; }
                   }//end packing
                
                for(Customer cusbil : billingQueue){
                    System.out.printf("billing       >>  Customer %d\n",cusbil.getID());
                    billingQueue.removeFirst();
                }
                System.out.println("");
            }//end even
        }//end max day
        System.out.println("");
        System.out.println("=== Remaining customers in order queue ===");
        for(Customer cremain : orderQueue){
            cremain.print();
        }
        System.out.println("");
        System.out.println("");
        
        System.out.println("=== Remaining customers in billing ququq (lastest to earliest) ===");
        for(int i = 0; i<=billingQueue.size() ; i++){
           billingQueue.getLast().print();
           billingQueue.removeLast();
        }
        
        
    }//end simulation
}//end class

class SortcusByOrder implements Comparator<Customer> {
    public int compare(Customer c1, Customer c2) {
        return Integer.compare(c1.getOrder(), c2.getOrder());
    } 
}
class SortcusByID implements Comparator<Customer> {
    public int compare(Customer c1, Customer c2) {
        return Integer.compare(c1.getID(), c2.getID());
    } 
}
/////////////////////////////////////////////////////////////////////////////
public class NewMain {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int item,day;
        System.out.println("Enter refill items");
        item = scan.nextInt();
        System.out.println("Enter max days");
        day = scan.nextInt();
        Shop S = new Shop(item,day);
        S.simulation();
    }

}
